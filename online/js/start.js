// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var Ajax, BaseFunctionality, Cities, DublinCommuter, ForecastManager, LocalStorage, Location, LuasManager, OffsiteMenu, Timer, app, controller, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  angular.module("btford.phonegap.ready", []).factory("phonegapReady", function($rootScope) {
    return function(fn) {
      var impl, queue;
      queue = [];
      impl = function() {
        return queue.push(Array.prototype.slice.call(arguments));
      };
      document.addEventListener("deviceready", (function() {
        queue.forEach(function(args) {
          return fn.apply(this, args);
        });
        return impl = fn;
      }), false);
      return function() {
        return impl.apply(this, arguments);
      };
    };
  });

  app = angular.module('ngDublinCommuter', ['btford.phonegap.ready']);

  app.factory("dublinLuasFactory", function($q, $rootScope, safeApply) {
    var deferred, dublinCommuter, factoryObject;
    deferred = $q.defer();
    dublinCommuter = new DublinCommuter;
    dublinCommuter.addListener(DublinCommuter.STATUS_CHANGE_EVENT, function(dublinCommuterInstance) {
      return safeApply($rootScope, function() {
        return deferred.resolve(dublinCommuterInstance);
      });
    });
    factoryObject = {};
    factoryObject.getApplicationPromise = function() {
      return deferred.promise;
    };
    factoryObject.getApplication = function() {
      return dublinCommuter;
    };
    dublinCommuter.run();
    return factoryObject;
  });

  app.factory("safeApply", function($rootScope) {
    var factoryObject;
    factoryObject = function($scope, fn) {
      var phase;
      phase = $scope.$root.$$phase;
      if (phase === '$apply' || phase === '$digest') {
        if (fn) {
          return $scope.$eval(fn);
        }
      } else {
        if (fn) {
          return $scope.$apply(fn);
        } else {
          return $scope.$apply();
        }
      }
    };
    return factoryObject;
  });

  app.factory("dublinTimingFactory", function($q, $rootScope, safeApply, dublinLuasFactory) {
    var deferred, factoryObject, timerInstance;
    deferred = $q.defer();
    timerInstance = new Timer(1000);
    timerInstance.addListener(Timer.TICK, function() {
      if (timerInstance.isNewMinute()) {
        dublinLuasFactory.getApplication().luasManager.refreshForecast();
      }
      return safeApply($rootScope, function() {
        return deferred.resolve(timerInstance);
      });
    });
    factoryObject = {};
    factoryObject.getTimerPromise = function() {
      return deferred.promise;
    };
    return factoryObject;
  });

  app.filter('timeformat', function() {
    var filterFunction;
    filterFunction = function(input, param) {
      var returnValue;
      if (isFinite(input)) {
        switch (input) {
          case '':
            returnValue = input;
            break;
          case '1':
            returnValue = input + ' minute';
            break;
          default:
            returnValue = input + ' minutes';
        }
      } else {
        returnValue = input;
      }
      return returnValue;
    };
    return filterFunction;
  });

  controller = app.controller("DublinCommuterController", function($scope, dublinLuasFactory, dublinTimingFactory) {
    var dublinCommuterPromise, dublinTimerPromise;
    dublinCommuterPromise = dublinLuasFactory.getApplicationPromise();
    dublinCommuterPromise.then(function(dublinCommuter) {
      return $scope.dublinCommuter = dublinCommuter;
    }, function(status) {
      return console.log('promise rejected because: ' + status);
    });
    dublinTimerPromise = dublinTimingFactory.getTimerPromise();
    dublinTimerPromise.then(function(timerInstance) {
      return $scope.timerInstance = timerInstance;
    });
    $scope.weatherIconClass = 'icon-forecast';
    if (dublinLuasFactory.getApplication().weatherManager.hasForecast()) {
      $scope.weatherIconClass += ' ' + dublinLuasFactory.getApplication().weatherManager.forecast.current.icon;
      console.log("scope: " + $scope.weatherIconClass);
    }
    $scope.$weatherIcon = 'clear-night';
    $scope.dublinCommuter = false;
    $scope.stationClicked = function(station) {
      return dublinLuasFactory.getApplication().luasManager.setStation(station);
    };
    return $scope.chooseAnotherStation = function() {
      return dublinLuasFactory.getApplication().clearCurrentPreferences();
    };
  });

  /* --------------------------------------------
       Begin utils.coffee
  --------------------------------------------
  */


  Date.prototype.yyyymmdd = function() {
    var RE_findSingleDigits, dateStamp;
    dateStamp = [this.getFullYear(), this.getMonth() + 1, this.getDate()].join("-");
    RE_findSingleDigits = /\b(\d)\b/g;
    dateStamp = dateStamp.replace(RE_findSingleDigits, "0$1");
    dateStamp.replace(/\s/g, "");
    return dateStamp;
  };

  Date.prototype.yyyymmddh = function() {
    var RE_findSingleDigits, dateStamp;
    dateStamp = [this.yyyymmdd(), this.getHours()].join("-");
    RE_findSingleDigits = /\b(\d)\b/g;
    dateStamp = dateStamp.replace(RE_findSingleDigits, "0$1");
    dateStamp.replace(/\s/g, "");
    return dateStamp;
  };

  Date.prototype.yyyymmddhm = function() {
    var RE_findSingleDigits, dateStamp;
    dateStamp = [this.yyyymmdd(), this.getHours(), this.getMinutes()].join("-");
    RE_findSingleDigits = /\b(\d)\b/g;
    dateStamp = dateStamp.replace(RE_findSingleDigits, "0$1");
    dateStamp.replace(/\s/g, "");
    return dateStamp;
  };

  Number.prototype.toRadians = function() {
    return this * Math.PI / 180;
  };

  /* --------------------------------------------
       Begin EventEmitter.coffee
  --------------------------------------------
  */


  (function(exports) {
    var EventEmitter, indexOfListener, nativeIndexOf, proto;
    EventEmitter = function() {};
    indexOfListener = function(listener, listeners) {
      var i;
      if (nativeIndexOf) {
        return listeners.indexOf(listener);
      }
      i = listeners.length;
      if ((function() {
        var _results;
        _results = [];
        while (i--) {
          _results.push(listeners[i] === listener);
        }
        return _results;
      })()) {
        return i;
      }
    };
    proto = EventEmitter.prototype;
    nativeIndexOf = (Array.prototype.indexOf ? true : false);
    proto.getListeners = function(evt) {
      var events;
      events = this._events || (this._events = {});
      return events[evt] || (events[evt] = []);
    };
    proto.addListener = function(evt, listener) {
      var listeners;
      listeners = this.getListeners(evt);
      if (indexOfListener(listener, listeners) === -1) {
        listeners.push(listener);
      }
      return this;
    };
    proto.removeListener = function(evt, listener) {
      var index, listeners;
      listeners = this.getListeners(evt);
      index = indexOfListener(listener, listeners);
      if (index !== -1) {
        listeners.splice(index, 1);
        if (listeners.length === 0) {
          this._events[evt] = null;
        }
      }
      return this;
    };
    proto.addListeners = function(evt, listeners) {
      return this.manipulateListeners(false, evt, listeners);
    };
    proto.removeListeners = function(evt, listeners) {
      return this.manipulateListeners(true, evt, listeners);
    };
    proto.manipulateListeners = function(remove, evt, listeners) {
      var i, multiple, single, value;
      i = void 0;
      value = void 0;
      single = (remove ? this.removeListener : this.addListener);
      multiple = (remove ? this.removeListeners : this.addListeners);
      if (typeof evt === "object") {
        for (i in evt) {
          if (evt.hasOwnProperty(i) && (value = evt[i])) {
            if (typeof value === "function") {
              single.call(this, i, value);
            } else {
              multiple.call(this, i, value);
            }
          }
        }
      } else {
        i = listeners.length;
        while (i--) {
          single.call(this, evt, listeners[i]);
        }
      }
      return this;
    };
    proto.removeEvent = function(evt) {
      if (evt) {
        this._events[evt] = null;
      } else {
        this._events = null;
      }
      return this;
    };
    proto.emitEvent = function(evt, args) {
      var i, listeners, response;
      listeners = this.getListeners(evt);
      i = listeners.length;
      response = void 0;
      while (i--) {
        response = (args ? listeners[i].apply(null, args) : listeners[i]());
        if (response === true) {
          this.removeListener(evt, listeners[i]);
        }
      }
      return this;
    };
    return exports.EventEmitter = EventEmitter;
  })(this);

  /* --------------------------------------------
       Begin BaseFunctionality.coffee
  --------------------------------------------
  */


  BaseFunctionality = (function(_super) {
    var settings;

    __extends(BaseFunctionality, _super);

    function BaseFunctionality() {
      _ref = BaseFunctionality.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    BaseFunctionality.API_ENDPOINT = 'http://api.dublin.io/api/v1';

    settings = {
      debug: false
    };

    BaseFunctionality.prototype.log = function(msg) {
      if (settings.debug) {
        return typeof console !== "undefined" && console !== null ? console.log(msg) : void 0;
      }
    };

    BaseFunctionality.prototype.delay = function() {
      var args, fn, time;
      time = arguments[0], fn = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      return setTimeout.apply(null, [fn, time].concat(__slice.call(args)));
    };

    BaseFunctionality.prototype.forever = function() {
      var args, fn, time;
      time = arguments[0], fn = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      return setInterval.apply(null, [fn, time].concat(__slice.call(args)));
    };

    return BaseFunctionality;

  })(EventEmitter);

  /* --------------------------------------------
       Begin Timer.coffee
  --------------------------------------------
  */


  Timer = (function(_super) {
    __extends(Timer, _super);

    Timer.TICK = "timer_tick";

    Timer.currentDate = false;

    function Timer(timeout) {
      var _this = this;
      if (!isFinite(timeout)) {
        timeout = 1000;
      }
      this.currentDate = new Date;
      this.forever(timeout, function() {
        _this.emitEvent(Timer.TICK, [_this]);
        return _this.currentDate = new Date;
      });
    }

    Timer.prototype.isNewMinute = function() {
      return this.currentDate.getSeconds() === 0;
    };

    return Timer;

  })(BaseFunctionality);

  /* --------------------------------------------
       Begin Ajax.coffee
  --------------------------------------------
  */


  Ajax = (function(_super) {
    var endPoint;

    __extends(Ajax, _super);

    Ajax.LOAD_FAILED = 'ajax_load_failed';

    Ajax.LOAD_SUCCESS = 'ajax_load_success';

    endPoint = null;

    function Ajax(uri) {
      endPoint = uri;
    }

    Ajax.prototype.perform = function(queryObject, dataType) {
      var dt,
        _this = this;
      dt = 'jsonp';
      if (dataType != null) {
        dt = dataType;
      }
      return $.ajax({
        url: endPoint,
        type: 'GET',
        dataType: dt,
        data: queryObject,
        error: function(jqXHR, textStatus, errorThrown) {
          return _this.emitEvent(Ajax.LOAD_FAILED, [textStatus]);
        },
        success: function(data, textStatus, jqXHR) {
          return _this.emitEvent(Ajax.LOAD_SUCCESS, [data]);
        }
      });
    };

    return Ajax;

  })(EventEmitter);

  /* --------------------------------------------
       Begin LocalStorage.coffee
  --------------------------------------------
  */


  LocalStorage = (function(_super) {
    __extends(LocalStorage, _super);

    function LocalStorage() {
      _ref1 = LocalStorage.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    LocalStorage.prototype.store = function(key, data) {
      return localStorage.setItem(key, JSON.stringify(data));
    };

    LocalStorage.prototype.retrieve = function(key) {
      var parsedObject, retrievedObject;
      retrievedObject = localStorage.getItem(key);
      parsedObject = JSON.parse(retrievedObject);
      return parsedObject;
    };

    LocalStorage.prototype.remove = function(key) {
      return localStorage.removeItem(key);
    };

    return LocalStorage;

  })(BaseFunctionality);

  /* --------------------------------------------
       Begin Location.coffee
  --------------------------------------------
  */


  Location = (function(_super) {
    __extends(Location, _super);

    Location.id = null;

    Location.location = null;

    Location.coordinates = null;

    Location.isGeolocated = null;

    Location.forecastManager = null;

    Location.luasManager = null;

    Location.LOCATION_LOADED = "location_cache_loaded";

    Location.LOCATION_UNKNOWN = "location_is_unknown";

    function Location(params) {
      this.geolocationFailure = __bind(this.geolocationFailure, this);
      this.geolocationSuccess = __bind(this.geolocationSuccess, this);
      this.id = params.id;
      this.location = params.name;
      this.coordinates = null;
      this.isGeolocated = false;
      log("New location");
      log(this);
    }

    Location.prototype.populate = function() {
      var isInitialized;
      isInitialized = this.cacheLoad();
      if (isInitialized) {
        return this.emitEvent(Location.LOCATION_LOADED, [this]);
      }
    };

    Location.prototype.cacheLoad = function() {
      var data, loaded;
      loaded = false;
      if (this.id != null) {
        data = this.retrieve(this.id);
        if (data != null) {
          this.isGeolocated = this.populateCoordinates(data);
          if (!this.isGeolocated) {
            this.geolocateMe();
          } else {
            loaded = true;
            this.feedLocationInformation();
          }
        } else {
          this.geolocateMe();
        }
      }
      return loaded;
    };

    Location.prototype.feedLocationInformation = function() {
      var params;
      params = {
        id: this.id,
        name: this.location,
        latidude: this.coordinates.latitude,
        longitude: this.coordinates.longitude
      };
      this.forecastManager = new ForecastManager(params);
      this.forecastManager.addListener(ForecastManager.FORECAST_SUCCESS, this.forecastSuccess);
      this.forecastManager.addListener(ForecastManager.FORECAST_FAILED, this.forecastFailure);
      this.luasManager = new LuasManager(params);
      this.luasManager.addListener(LuasManager.STATION_FOUND, this.luasStationFound);
      this.luasManager.addListener(LuasManager.STATION_UNKNOWN, this.luasStationUnknown);
      return this.luasManager.addListener(LuasManager.SYSTEM_DOWN, this.luasSystemDown);
    };

    Location.prototype.cacheSave = function() {
      var saved;
      saved = false;
      if (this.id != null) {
        this.store(this.id, this);
        saved = true;
      }
      return saved;
    };

    Location.prototype.destroy = function() {
      this.remove(this.id);
      this.isGeolocated = false;
      this.hasForecast = false;
      return this.forecast = {};
    };

    Location.prototype.populateCoordinates = function(data) {
      var foundCoordinates;
      foundCoordinates = false;
      if (data.coordinates != null) {
        this.location = data.location;
        this.coordinates = {};
        this.coordinates.latitude = data.coordinates.latitude;
        this.coordinates.longitude = data.coordinates.longitude;
        foundCoordinates = true;
      }
      return foundCoordinates;
    };

    Location.prototype.geolocateMe = function() {
      var coder;
      coder = new Geocoder(this.location);
      coder.addListener(Geocoder.SUCCESS, this.geolocationSuccess);
      coder.addListener(Geocoder.FAILURE, this.geolocationFailure);
      return coder.perform();
    };

    Location.prototype.geolocationSuccess = function(data) {
      this.location = data.location;
      this.isGeolocated = this.populateCoordinates(data);
      this.cacheSave();
      return this.emitEvent(Location.LOCATION_LOADED, [this]);
    };

    Location.prototype.geolocationFailure = function(text) {
      return this.emitEvent(Location.LOCATION_UNKNOWN, [this]);
    };

    Location.prototype.showData = function() {};

    return Location;

  })(LocalStorage);

  /* --------------------------------------------
       Begin Locations.coffee
  --------------------------------------------
  */


  Cities = (function(_super) {
    var cacheKey, defaults, loadCount;

    __extends(Cities, _super);

    cacheKey = null;

    Cities.autoIncrement = null;

    Cities.locations = null;

    Cities.cityDescriptors = null;

    defaults = ['Dublin', 'London', 'Paris', 'Barcelona'];

    loadCount = null;

    Cities.CITIES_NEW = "city_new_added";

    Cities.CITIES_COMPLETE = "cities_are_loaded";

    Cities.CITIES_UPDATE = "city_forecast_update";

    Cities.CITIES_FAILURE = "city_forecast_error";

    Cities.CITIES_UNKNOWN = "city_unknown";

    function Cities() {
      this.handleCityForecastFail = __bind(this.handleCityForecastFail, this);
      this.handleCityForecastSuccess = __bind(this.handleCityForecastSuccess, this);
      this.handleCityUnknown = __bind(this.handleCityUnknown, this);
      this.handleCityLoaded = __bind(this.handleCityLoaded, this);
      cacheKey = 'cities';
      this.locations = {};
      this.cityDescriptors = [];
      this.autoIncrement = 0;
      loadCount = 0;
    }

    Cities.prototype.cacheSave = function() {
      var cacheObject;
      cacheObject = {
        'autoIncrement': this.autoIncrement,
        'cities': this.cityDescriptors
      };
      return this.store(cacheKey, cacheObject);
    };

    Cities.prototype.populate = function() {
      var cityDescriptor, cityName, data, i, params, _i, _j, _len, _len1, _ref2, _results;
      data = this.retrieve(cacheKey);
      if ((data != null) && (data.autoIncrement != null) && (data.cities != null)) {
        this.autoIncrement = data.autoIncrement;
        this.cityDescriptors = data.cities;
      } else {
        i = 0;
        for (_i = 0, _len = defaults.length; _i < _len; _i++) {
          cityName = defaults[_i];
          i++;
          this.cityDescriptors.push({
            'id': i,
            'name': cityName
          });
        }
        this.autoIncrement = i + 1;
        this.cacheSave();
      }
      _ref2 = this.cityDescriptors;
      _results = [];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        cityDescriptor = _ref2[_j];
        params = {
          id: cityDescriptor.id,
          name: cityDescriptor.name
        };
        _results.push(this.addCityToStructure(params));
      }
      return _results;
    };

    Cities.prototype.addCityToStructure = function(params) {
      var city;
      city = new City(params);
      city.addListener(City.CITY_LOADED, this.handleCityLoaded);
      city.addListener(City.CITY_UNKNOWN, this.handleCityUnknown);
      city.addListener(City.CITY_FORECAST_SUCCESS, this.handleCityForecastSuccess);
      city.addListener(City.CITY_FORECAST_FAILED, this.handleCityForecastFail);
      return city.populate();
    };

    Cities.prototype.generateIdAndAddCity = function(cityName) {
      var cityID, params;
      if (!this.cityExists(cityName)) {
        cityID = this.autoIncrement;
        this.cityDescriptors.push({
          'id': cityID,
          'name': cityName
        });
        this.autoIncrement++;
        this.cacheSave();
        params = {
          id: cityID,
          name: cityName
        };
        return this.addCityToStructure(params);
      }
    };

    Cities.prototype.cityExists = function(cityName) {
      var descriptor, _i, _len, _ref2;
      _ref2 = this.cityDescriptors;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        descriptor = _ref2[_i];
        if (cityName === descriptor.name) {
          return true;
        }
      }
      return false;
    };

    Cities.prototype.removeCity = function(cityID) {
      var realCityID;
      realCityID = parseInt(cityID, 10);
      this.cityDescriptors = this.cityDescriptors.filter(function(descriptor) {
        return descriptor.id !== realCityID;
      });
      if (this.locations[cityID]) {
        this.locations[cityID].destroy();
        delete this.locations[cityID];
      }
      this.cacheSave();
      return loadCount--;
    };

    Cities.prototype.handleCityLoaded = function(cityData) {
      var descriptor, i, params, _i, _len, _ref2;
      i = 0;
      _ref2 = this.cityDescriptors;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        descriptor = _ref2[_i];
        if (cityData.id === descriptor.id) {
          this.cityDescriptors[i].name = cityData.location;
        }
        i++;
      }
      this.cacheSave();
      this.locations[cityData.id] = cityData;
      params = {
        id: cityData.id,
        name: cityData.location,
        coords: cityData.coordinates,
        overview: cityData.getForecastOverview(),
        forecast: cityData.forecast
      };
      this.emitEvent(Cities.CITIES_NEW, [params]);
      loadCount++;
      if (loadCount >= this.cityDescriptors.length) {
        return this.emitEvent(Cities.CITIES_COMPLETE, []);
      }
    };

    Cities.prototype.handleCityUnknown = function(cityData) {
      var params;
      params = {
        id: cityData.id,
        name: cityData.location
      };
      return this.emitEvent(Cities.CITIES_UNKNOWN, [params]);
    };

    Cities.prototype.handleCityForecastSuccess = function(cityData) {
      var params, status;
      params = {
        id: cityData.id,
        name: cityData.location,
        coords: cityData.coordinates,
        overview: cityData.getForecastOverview(),
        forecast: cityData.forecast
      };
      status = cityData.hasValidForecast();
      if (status) {
        return this.emitEvent(Cities.CITIES_UPDATE, [params]);
      } else {
        return this.emitEvent(Cities.CITIES_FAILURE, [params]);
      }
    };

    Cities.prototype.handleCityForecastFail = function(cityData) {
      var params;
      params = {
        id: cityData.id,
        name: cityData.location,
        coords: cityData.coordinates,
        overview: cityData.getForecastOverview()
      };
      return this.emitEvent(Cities.CITIES_FAILURE, [params]);
    };

    Cities.prototype.coldRefreshForecasts = function() {
      var city, cityID, _results;
      _results = [];
      for (cityID in this.locations) {
        city = this.locations[cityID];
        _results.push(city.refreshForecast());
      }
      return _results;
    };

    Cities.prototype.mildRefreshForecasts = function() {
      var city, cityID, validForecast, _results;
      _results = [];
      for (cityID in this.locations) {
        city = this.locations[cityID];
        validForecast = city.hasValidForecast();
        if (!validForecast) {
          _results.push(city.refreshForecast());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Cities.prototype.showData = function() {
      return console.log(this);
    };

    return Cities;

  })(LocalStorage);

  /* --------------------------------------------
       Begin ForecastManager.coffee
  --------------------------------------------
  */


  ForecastManager = (function(_super) {
    __extends(ForecastManager, _super);

    ForecastManager.location = null;

    ForecastManager.coordinates = null;

    ForecastManager.forecast = null;

    ForecastManager._hasForecast = null;

    ForecastManager.weatherAPI = null;

    ForecastManager.apiKey = null;

    ForecastManager.FORECAST_FAILED = "forecast_failed";

    ForecastManager.FORECAST_SUCCESS = "forecast_success";

    function ForecastManager(params) {
      this.forecastFailure = __bind(this.forecastFailure, this);
      this.forecastSuccess = __bind(this.forecastSuccess, this);
      this.id = 'forecast-data';
      if ((params != null) && (params.latitude != null) && (params.longitude != null)) {
        this.coordinates = {
          latitude: params.latitude,
          longitude: params.longitude,
          initialized: true
        };
      }
      this._hasForecast = false;
      this.forecast = {};
      this.weatherAPI = BaseFunctionality.API_ENDPOINT + '/weather/for';
    }

    ForecastManager.prototype.cacheWeatherDataForThisStation = function(cacheKey) {
      return this.id = 'forecast-data' + '-' + cacheKey;
    };

    ForecastManager.prototype.populate = function() {
      var isInitialized;
      isInitialized = this.cacheLoad();
      if (isInitialized) {
        return this.emitEvent(ForecastManager.FORECAST_SUCCESS, [this.forecast]);
      }
    };

    ForecastManager.prototype.cacheLoad = function() {
      var data, validForecast;
      this._hasForecast = false;
      if (this.coordinates && (this.coordinates.initialized != null)) {
        data = this.retrieve(this.id);
        if (data != null) {
          if ((data.forecast != null) && (data.forecast.current != null)) {
            this.forecast = data.forecast;
            validForecast = this.hasValidForecast();
            if (validForecast) {
              this._hasForecast = true;
            }
          }
        }
      }
      return this._hasForecast;
    };

    ForecastManager.prototype.setCoordinates = function(params) {
      var isInitialized;
      if ((params != null) && (params.latitude != null) && (params.longitude != null)) {
        this.coordinates = {
          latitude: params.latitude,
          longitude: params.longitude,
          initialized: true
        };
        isInitialized = this.cacheLoad();
        if (isInitialized) {
          return this.emitEvent(ForecastManager.FORECAST_SUCCESS, [this.forecast]);
        } else {
          return this.refreshForecast();
        }
      }
    };

    ForecastManager.prototype.refreshForecast = function() {
      var endPoint, params, request;
      if (this.coordinates && (this.coordinates.initialized != null)) {
        endPoint = this.weatherAPI + '/' + this.coordinates.latitude + ',' + this.coordinates.longitude;
        this.log(endPoint);
        request = new Ajax(endPoint);
        request.addListener(Ajax.LOAD_SUCCESS, this.forecastSuccess);
        request.addListener(Ajax.LOAD_FAILED, this.forecastFailure);
        params = {};
        return request.perform(params, 'json');
      }
    };

    ForecastManager.prototype.forecastSuccess = function(transport) {
      if (transport.result['status']) {
        this.populateForecast(transport.result.data);
        this._hasForecast = true;
        this.cacheSave();
        return this.emitEvent(ForecastManager.FORECAST_SUCCESS, [this.forecast]);
      } else {
        return this.emitEvent(ForecastManager.FORECAST_FAILED, [this]);
      }
    };

    ForecastManager.prototype.forecastFailure = function(data) {
      return this.emitEvent(ForecastManager.FORECAST_FAILED, [this]);
    };

    ForecastManager.prototype.populateForecast = function(data) {
      var currentDate, currentForecast, currentTime;
      currentTime = data.time;
      currentDate = new Date(currentTime * 1000);
      currentForecast = {
        'key': currentDate.yyyymmddh(),
        'date': currentDate.yyyymmdd(),
        'timestamp': data.time,
        'summary': data.summary,
        'icon': data.icon,
        'temp': parseInt(data.temp)
      };
      this.forecast.current = currentForecast;
      this.forecast.coordinates = this.coordinates;
      return this.forecast.days = {};
    };

    ForecastManager.prototype.hasValidForecast = function() {
      var currentDateKey, status;
      status = false;
      currentDateKey = new Date;
      currentDateKey = currentDateKey.yyyymmddh();
      if (this.forecast && this.forecast['current']) {
        if (this.forecast.current.key === currentDateKey) {
          status = true;
        }
      }
      this.log(status);
      return status;
    };

    ForecastManager.prototype.getForecastOverview = function() {
      var contentText, validForecast;
      contentText = this.location;
      validForecast = this.hasValidForecast();
      if (validForecast) {
        contentText = this.location + ' at ' + this.forecast.current.time + ': ' + this.forecast.current.temp.c + '&deg;C, ' + this.forecast.current.description;
      }
      return contentText;
    };

    ForecastManager.prototype.cacheSave = function() {
      var data, saved;
      saved = false;
      data = {
        forecast: this.forecast
      };
      this.store(this.id, data);
      saved = true;
      return saved;
    };

    ForecastManager.prototype.destroy = function() {
      this._hasForecast = false;
      this.coordinates = false;
      return this.forecast = {};
    };

    ForecastManager.prototype.celsius = function(f) {
      var c;
      c = null;
      if (f != null) {
        c = (f - 32) * 5 / 9;
        c = Math.round(c);
      }
      this.log(c);
      return c;
    };

    ForecastManager.prototype.hasForecast = function() {
      return this._hasForecast;
    };

    return ForecastManager;

  })(LocalStorage);

  /* --------------------------------------------
       Begin LuasManager.coffee
  --------------------------------------------
  */


  LuasManager = (function(_super) {
    __extends(LuasManager, _super);

    LuasManager.luasStations = null;

    LuasManager.id = null;

    LuasManager.coordinates = null;

    LuasManager.currentStation = null;

    LuasManager.forecastData = null;

    LuasManager._hasLuas = false;

    LuasManager._hasForecast = false;

    LuasManager.STATION_FOUND = "luas_station_found";

    LuasManager.STATION_UNKNOWN = "luas_station_unknown";

    LuasManager.FORECAST_SUCCESS = "luas_station_forecast";

    LuasManager.FORECAST_FAILED = "luas_station_forecast_unavailable";

    LuasManager.SYSTEM_DOWN = "luas_system_down";

    function LuasManager(params) {
      this.forecastFailure = __bind(this.forecastFailure, this);
      this.forecastSuccess = __bind(this.forecastSuccess, this);
      this.buildSuggestions = __bind(this.buildSuggestions, this);
      this.id = 'luas-data';
      this._hasForecast = false;
      this._hasLuas = false;
      if ((params != null) && (params.latitude != null) && (params.longitude != null)) {
        this.coordinates = {
          latitude: params.latitude,
          longitude: params.longitude
        };
      } else {
        this.coordinates = false;
      }
      this.luasAPI = BaseFunctionality.API_ENDPOINT + "/luas-forecast/for/";
      this.luasStations = [
        {
          key: "st-stephens-green",
          name: "St. Stephen's Green",
          latitude: 53.339605,
          longitude: -6.26128
        }, {
          key: "harcourt",
          name: "Harcourt",
          latitude: 53.333551,
          longitude: -6.2629
        }, {
          key: "charlemont",
          name: "Charlemont",
          latitude: 53.330681,
          longitude: -6.2588
        }, {
          key: "ranelagh",
          name: "Ranelagh",
          latitude: 53.326266,
          longitude: -6.25636
        }, {
          key: "beechwood",
          name: "Beechwood",
          latitude: 53.320845,
          longitude: -6.25486
        }, {
          key: "cowper",
          name: "Cowper",
          latitude: 53.309839,
          longitude: -6.25174
        }, {
          key: "milltown",
          name: "Milltown",
          latitude: 53.309839,
          longitude: -6.25174
        }, {
          key: "windy-arbour",
          name: "Windy Arbour",
          latitude: 53.293798,
          longitude: -6.24699
        }, {
          key: "dundrum",
          name: "Dundrum",
          latitude: 53.293798,
          longitude: -6.24699
        }, {
          key: "balally",
          name: "Balally",
          latitude: 53.286102,
          longitude: -6.23679
        }, {
          key: "kilmacud",
          name: "Kilmacud",
          latitude: 53.282997,
          longitude: -6.223969
        }, {
          key: "stillorgan",
          name: "Stillorgan",
          latitude: 53.279347,
          longitude: -6.210156
        }, {
          key: "sandyford",
          name: "Sandyford",
          latitude: 53.277596,
          longitude: -6.204679
        }, {
          key: "central-park",
          name: "Central Park",
          latitude: 53.270321,
          longitude: -6.203531
        }, {
          key: "glencairn",
          name: "Glencairn",
          latitude: 53.266313,
          longitude: -6.210161
        }, {
          key: "the-gallops",
          name: "The Gallops",
          latitude: 53.262109,
          longitude: -6.208775
        }, {
          key: "leopardstown-valley",
          name: "Leopardstown Valley",
          latitude: 53.257996,
          longitude: -6.197485
        }, {
          key: "ballyogan-wood",
          name: "Ballyogan Wood",
          latitude: 53.255901,
          longitude: -6.1882
        }, {
          key: "carrickmines",
          name: "Carrickmines",
          latitude: 53.254518,
          longitude: -6.172085
        }, {
          key: "laughanstown",
          name: "Laughanstown",
          latitude: 53.250955,
          longitude: -6.156045
        }, {
          key: "cherrywood",
          name: "Cherrywood",
          latitude: 53.247832,
          longitude: -6.14845
        }, {
          key: "brides-glen",
          name: "Brides Glen",
          latitude: 53.24216,
          longitude: -6.142961
        }, {
          key: "the-point",
          name: "The Point",
          latitude: 53.34834,
          longitude: -6.22962
        }, {
          key: "spencer-dock",
          name: "Spencer Dock",
          latitude: 53.34882,
          longitude: -6.23718
        }, {
          key: "mayor-square-nci",
          name: "Mayor Square - NCI",
          latitude: 53.34933,
          longitude: -6.24355
        }, {
          key: "georges-dock",
          name: "George's Dock",
          latitude: 53.34961,
          longitude: -6.24807
        }, {
          key: "busaras",
          name: "Busaras",
          latitude: 53.35007,
          longitude: -6.25144
        }, {
          key: "connolly",
          name: "Connolly",
          latitude: 53.351499,
          longitude: -6.24993
        }, {
          key: "abbey-street",
          name: "Abbey Street",
          latitude: 53.348588,
          longitude: -6.258371
        }, {
          key: "jervis",
          name: "Jervis",
          latitude: 53.347669,
          longitude: -6.26609
        }, {
          key: "the-four-courts",
          name: "The Four Courts",
          latitude: 53.346824,
          longitude: -6.27291
        }, {
          key: "smithfield",
          name: "Smithfield",
          latitude: 53.347259,
          longitude: -6.2786
        }, {
          key: "museum",
          name: "Museum",
          latitude: 53.347842,
          longitude: -6.28673
        }, {
          key: "heuston",
          name: "Heuston",
          latitude: 53.346388,
          longitude: -6.29223
        }, {
          key: "jamess",
          name: "James's",
          latitude: 53.342033,
          longitude: -6.29384
        }, {
          key: "fatima",
          name: "Fatima",
          latitude: 53.33835,
          longitude: -6.29277
        }, {
          key: "rialto",
          name: "Rialto",
          latitude: 53.337869,
          longitude: -6.2975
        }, {
          key: "suir-road",
          name: "Suir Road",
          latitude: 53.33664,
          longitude: -6.30733
        }, {
          key: "goldenbridge",
          name: "Goldenbridge",
          latitude: 53.335857,
          longitude: -6.31366
        }, {
          key: "drimnagh",
          name: "Drimnagh",
          latitude: 53.335383,
          longitude: -6.31833
        }, {
          key: "blackhorse",
          name: "Blackhorse",
          latitude: 53.334192,
          longitude: -6.32793
        }, {
          key: "bluebell",
          name: "Bluebell",
          latitude: 53.3293,
          longitude: -6.33396
        }, {
          key: "kylemore",
          name: "Kylemore",
          latitude: 53.32649,
          longitude: -6.3439
        }, {
          key: "red-cow",
          name: "Red Cow",
          latitude: 53.31666,
          longitude: -6.36939
        }, {
          key: "kingswood",
          name: "Kingswood",
          latitude: 53.30247,
          longitude: -6.36862
        }, {
          key: "belgard",
          name: "Belgard",
          latitude: 53.29874,
          longitude: -6.3745
        }, {
          key: "cookstown",
          name: "Cookstown",
          latitude: 53.294253,
          longitude: -6.38623
        }, {
          key: "hospital",
          name: "Hospital",
          latitude: 53.289591,
          longitude: -6.3793
        }, {
          key: "tallaght",
          name: "Tallaght",
          latitude: 53.28771,
          longitude: -6.37359
        }, {
          key: "fettercairn",
          name: "Fettercairn",
          latitude: 53.29395,
          longitude: -6.3957
        }, {
          key: "cheeverstown",
          name: "Cheeverstown",
          latitude: 53.29103,
          longitude: -6.4076
        }, {
          key: "citywest-campus",
          name: "Citywest Campus",
          latitude: 53.28781,
          longitude: -6.42022
        }, {
          key: "fortunestown",
          name: "Fortunestown",
          latitude: 53.28441,
          longitude: -6.42501
        }, {
          key: "saggart",
          name: "Saggart",
          latitude: 53.28483,
          longitude: -6.43904
        }
      ];
    }

    LuasManager.prototype.populate = function() {
      var isInitialized, suggestions;
      isInitialized = this.cacheLoad();
      if (isInitialized) {
        this.emitEvent(LuasManager.STATION_FOUND, [this.currentStation]);
        return this.refreshForecast();
      } else {
        suggestions = this.buildSuggestions();
        return this.emitEvent(LuasManager.STATION_UNKNOWN, [suggestions]);
      }
    };

    LuasManager.prototype.buildSuggestions = function() {
      var suggestions;
      suggestions = [];
      if ((this.coordinates != null) && (this.coordinates.latitude != null) && (this.coordinates.longitude != null)) {
        suggestions = this.sortStationsByGPSDistance();
      } else {
        suggestions = this.luasStations.slice(0);
      }
      return suggestions;
    };

    LuasManager.prototype.sortStationsByGPSDistance = function() {
      var suggestions,
        _this = this;
      suggestions = this.luasStations.slice(0);
      suggestions.sort(function(a, b) {
        return _this.compareDistance(a, b);
      });
      return suggestions;
    };

    LuasManager.prototype.compareDistance = function(a, b) {
      var distanceToA, distanceToB, retVal;
      distanceToA = this.getDistance(a);
      distanceToB = this.getDistance(b);
      retVal = 0;
      if (distanceToA > distanceToB) {
        retVal = 1;
      } else {
        if (distanceToA < distanceToB) {
          retVal = -1;
        }
      }
      return retVal;
    };

    LuasManager.prototype.getDistance = function(point) {
      var R, a, c, d, dLat, dLon, lat1, lat2, lon1, lon2;
      R = 6371;
      lat1 = this.coordinates['latitude'];
      lat2 = point['latitude'];
      lon1 = this.coordinates['longitude'];
      lon2 = point['longitude'];
      dLat = (lat2 - lat1).toRadians();
      dLon = (lon2 - lon1).toRadians();
      lat1 = lat1.toRadians();
      lat2 = lat2.toRadians();
      a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);
      c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      d = R * c;
      return d;
    };

    LuasManager.prototype.setStation = function(station) {
      var status;
      status = false;
      if ((station != null) && (station.latitude != null) && (station.longitude != null) && (station.key != null)) {
        this.currentStation = station;
        this.coordinates = {
          latitude: station.latitude,
          longitude: station.longitude
        };
        this.cacheSave();
        this._hasLuas = true;
        this.refreshForecast();
        status = true;
      }
      return status;
    };

    LuasManager.prototype.cacheLoad = function() {
      var data, validStation;
      this._hasLuas = false;
      if (this.id != null) {
        data = this.retrieve(this.id);
        if ((data != null) && (data.currentStation != null) && (data.currentStation.key != null)) {
          validStation = this.stationIsValid(data.currentStation);
          if (validStation) {
            this.currentStation = validStation;
            this._hasLuas = true;
          }
        }
      }
      return this._hasLuas;
    };

    LuasManager.prototype.stationIsValid = function(requestedStation) {
      var station, status, _i, _len, _ref2;
      status = false;
      _ref2 = this.luasStations;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        station = _ref2[_i];
        if (requestedStation.key === station.key) {
          status = station;
        }
      }
      return status;
    };

    LuasManager.prototype.refreshForecast = function() {
      var endPoint, params, request;
      this.forecastData = null;
      this._hasForecast = false;
      if (this.currentStation != null) {
        endPoint = this.luasAPI + this.currentStation.key;
        request = new Ajax(endPoint);
        request.addListener(Ajax.LOAD_SUCCESS, this.forecastSuccess);
        request.addListener(Ajax.LOAD_FAILED, this.forecastFailure);
        params = {};
        return request.perform(params, 'json');
      }
    };

    LuasManager.prototype.forecastSuccess = function(transport) {
      if (transport.result.status) {
        this.forecastData = transport.result.data;
        this._hasForecast = true;
        this.cacheSave();
        return this.emitEvent(LuasManager.FORECAST_SUCCESS, [this.forecastData]);
      } else {
        return this.emitEvent(LuasManager.FORECAST_FAILED, [this]);
      }
    };

    LuasManager.prototype.forecastFailure = function(data) {
      this._hasForecast = false;
      return this.emitEvent(LuasManager.SYSTEM_DOWN, [this]);
    };

    LuasManager.prototype.cacheSave = function() {
      var data, saved;
      saved = false;
      if (this.currentStation != null) {
        data = {
          currentStation: {
            key: this.currentStation.key
          }
        };
        this.store(this.id, data);
        saved = true;
      }
      return saved;
    };

    LuasManager.prototype.destroy = function() {
      this.remove(this.id);
      this._hasForecast = false;
      this._hasLuas = false;
      return this.coordinates = false;
    };

    LuasManager.prototype.hasLuas = function() {
      return this._hasLuas;
    };

    LuasManager.prototype.hasForecast = function() {
      return this._hasForecast;
    };

    return LuasManager;

  })(LocalStorage);

  /* --------------------------------------------
       Begin OffsiteMenu.coffee
  --------------------------------------------
  */


  OffsiteMenu = (function(_super) {
    __extends(OffsiteMenu, _super);

    OffsiteMenu.meny = null;

    function OffsiteMenu(selectorID) {
      var options;
      options = {
        menuElement: document.querySelector('.menymenu'),
        contentsElement: document.querySelector('.pagecontainer'),
        position: 'left',
        height: 200,
        width: 260,
        mouse: true,
        touch: true
      };
      this.meny = Meny.create(options);
      this.bindUIListeners();
    }

    OffsiteMenu.prototype.bindUIListeners = function() {
      var _this = this;
      return ($(document)).on('click', this.parentSelectorID, function(e) {
        var threedee, type;
        type = $(e.currentTarget).data("effeckt");
        threedee = $(e.currentTarget).data("threedee");
        return _this.toggleNavigation(type, threedee);
      });
    };

    OffsiteMenu.prototype.toggleNavigation = function(type, threedee) {
      if (!this.opened) {
        $("#effeckt-off-screen-nav").addClass(type);
        if (threedee) {
          $('html').addClass('md-perspective');
        }
        setTimeout(function() {
          return $("#effeckt-off-screen-nav").addClass('effeckt-off-screen-nav-show');
        }, 100);
      } else {
        $("#effeckt-off-screen-nav").removeClass('effeckt-off-screen-nav-show');
        setTimeout(function() {
          var a;
          $("#effeckt-off-screen-nav").removeClass(type);
          $("#effeckt-off-screen-nav").hide();
          a = $("#effeckt-off-screen-nav").width;
          $("#effeckt-off-screen-nav").show();
          return $('html').removeClass('md-perspective');
        }, 100);
      }
      return this.opened = !this.opened;
    };

    return OffsiteMenu;

  })(BaseFunctionality);

  /* --------------------------------------------
       Begin DublinCommuter.coffee
  --------------------------------------------
  */


  DublinCommuter = (function(_super) {
    __extends(DublinCommuter, _super);

    DublinCommuter.STATUS_CHANGE_EVENT = 'somethings_happening_with_the_data_here';

    DublinCommuter.luasManager = null;

    DublinCommuter.weatherManager = null;

    DublinCommuter.offsiteMenu = null;

    function DublinCommuter() {
      this.handleWeatherForecastFailed = __bind(this.handleWeatherForecastFailed, this);
      this.handleWeatherForecastSuccess = __bind(this.handleWeatherForecastSuccess, this);
      this.handleLuasForecastFailure = __bind(this.handleLuasForecastFailure, this);
      this.handleLuasForecastSuccess = __bind(this.handleLuasForecastSuccess, this);
      this.handleLuasSystemDown = __bind(this.handleLuasSystemDown, this);
      this.handleLuasStationUnknown = __bind(this.handleLuasStationUnknown, this);
      this.handleLuasStationFound = __bind(this.handleLuasStationFound, this);
      this.initialize();
    }

    DublinCommuter.prototype.initialize = function() {
      var params;
      params = {
        latitude: 53.309839,
        longitude: -6.25174
      };
      this.cleanupAfterPreviousVersions();
      this.luasManager = new LuasManager;
      this.luasManager.addListener(LuasManager.STATION_FOUND, this.handleLuasStationFound);
      this.luasManager.addListener(LuasManager.STATION_UNKNOWN, this.handleLuasStationUnknown);
      this.luasManager.addListener(LuasManager.SYSTEM_DOWN, this.handleLuasSystemDown);
      this.luasManager.addListener(LuasManager.FORECAST_SUCCESS, this.handleLuasForecastSuccess);
      this.luasManager.addListener(LuasManager.FORECAST_FAILED, this.handleLuasForecastFailure);
      this.weatherManager = new ForecastManager;
      this.weatherManager.addListener(ForecastManager.FORECAST_SUCCESS, this.handleWeatherForecastSuccess);
      return this.weatherManager.addListener(ForecastManager.FORECAST_FAILED, this.handleWeatherForecastFailed);
    };

    DublinCommuter.prototype.run = function() {
      this.luasManager.populate();
      return this.weatherManager.populate();
    };

    DublinCommuter.prototype.clearCurrentPreferences = function() {
      this.luasManager.destroy();
      this.weatherManager.destroy();
      return this.emitEvent(DublinCommuter.STATUS_CHANGE_EVENT, [this]);
    };

    DublinCommuter.prototype.handleLuasStationFound = function(station) {
      return this.emitEvent(DublinCommuter.STATUS_CHANGE_EVENT, [this]);
    };

    DublinCommuter.prototype.handleLuasStationUnknown = function(data) {
      return this.emitEvent(DublinCommuter.STATUS_CHANGE_EVENT, [this]);
    };

    DublinCommuter.prototype.handleLuasSystemDown = function() {
      return this.emitEvent(DublinCommuter.STATUS_CHANGE_EVENT, [this]);
    };

    DublinCommuter.prototype.handleLuasForecastSuccess = function(data) {
      this.weatherManager.cacheWeatherDataForThisStation(this.luasManager.currentStation.key);
      this.weatherManager.setCoordinates(this.luasManager.currentStation);
      return this.emitEvent(DublinCommuter.STATUS_CHANGE_EVENT, [this]);
    };

    DublinCommuter.prototype.handleLuasForecastFailure = function(data) {
      return data;
    };

    DublinCommuter.prototype.handleWeatherForecastSuccess = function(data) {
      return this.emitEvent(DublinCommuter.STATUS_CHANGE_EVENT, [this]);
    };

    DublinCommuter.prototype.handleWeatherForecastFailed = function(data) {
      return data;
    };

    DublinCommuter.prototype.cleanupAfterPreviousVersions = function() {
      return this.remove('forecast-data');
    };

    return DublinCommuter;

  })(LocalStorage);

}).call(this);
